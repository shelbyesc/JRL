diff --git a/node_modules/expo-dev-menu/ios/DevMenuViewController.swift b/node_modules/expo-dev-menu/ios/DevMenuViewController.swift
index c5e7494..74038af 100644
--- a/node_modules/expo-dev-menu/ios/DevMenuViewController.swift
+++ b/node_modules/expo-dev-menu/ios/DevMenuViewController.swift
@@ -14,7 +14,7 @@ class DevMenuViewController: UIViewController {
     self.manager = manager
 
     super.init(nibName: nil, bundle: nil)
-    edgesForExtendedLayout = UIRectEdge.init(rawValue: 0)
+    edgesForExtendedLayout = []
     extendedLayoutIncludesOpaqueBars = true
   }
 
@@ -35,7 +35,7 @@ class DevMenuViewController: UIViewController {
 
   override func viewWillLayoutSubviews() {
     super.viewWillLayoutSubviews()
-    reactRootView?.frame = CGRect(x: 0, y: 0, width: view.frame.size.width, height: view.frame.size.height)
+    reactRootView?.frame = view.bounds
   }
 
   override func viewWillAppear(_ animated: Bool) {
@@ -45,9 +45,7 @@ class DevMenuViewController: UIViewController {
   }
 
   override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
-    get {
-      return UIInterfaceOrientationMask.all
-    }
+    return .all
   }
 
   @available(iOS 12.0, *)
@@ -58,27 +56,34 @@ class DevMenuViewController: UIViewController {
     set {}
   }
 
-  // MARK: private
+  // MARK: Private
 
   private func initialProps() -> [String: Any] {
-    let isSimulator = TARGET_IPHONE_SIMULATOR > 0
+   #if targetEnvironment(simulator)
+let isSimulator = true
+#else
+let isSimulator = false
+#endif
+
 
     return [
       "showOnboardingView": manager.shouldShowOnboarding(),
       "appInfo": manager.getAppInfo(),
       "devSettings": manager.getDevSettings(),
       "menuPreferences": DevMenuPreferences.serialize(),
-      "uuid": UUID.init().uuidString,
+      "uuid": UUID().uuidString,
       "isDevice": !isSimulator,
       "registeredCallbacks": manager.registeredCallbacks.map { $0.name }
     ]
   }
 
-  // RCTRootView assumes it is created on a loading bridge.
-  // in our case, the bridge has usually already loaded. so we need to prod the view.
   private func forceRootViewToRenderHack() {
     if !hasCalledJSLoadedNotification, let bridge = manager.appInstance.bridge {
-      let notification = Notification(name: DevMenuViewController.JavaScriptDidLoadNotification, object: nil, userInfo: ["bridge": bridge])
+      let notification = Notification(
+        name: DevMenuViewController.JavaScriptDidLoadNotification,
+        object: nil,
+        userInfo: ["bridge": bridge]
+      )
 
       reactRootView?.javaScriptDidLoad(notification)
       hasCalledJSLoadedNotification = true
@@ -89,18 +94,22 @@ class DevMenuViewController: UIViewController {
     guard let bridge = manager.appInstance.bridge else {
       return
     }
+
     if reactRootView?.bridge != bridge {
-      if reactRootView != nil {
-        reactRootView?.removeFromSuperview()
-        reactRootView = nil
-      }
+      reactRootView?.removeFromSuperview()
+      reactRootView = nil
       hasCalledJSLoadedNotification = false
-      reactRootView = DevMenuRootView(bridge: bridge, moduleName: "main", initialProperties: initialProps())
+
+      reactRootView = DevMenuRootView(
+        bridge: bridge,
+        moduleName: "main",
+        initialProperties: initialProps()
+      )
       reactRootView?.frame = view.bounds
-      reactRootView?.backgroundColor = UIColor.clear
+      reactRootView?.backgroundColor = .clear
 
-      if isViewLoaded, let reactRootView = reactRootView {
-        view.addSubview(reactRootView)
+      if isViewLoaded, let rootView = reactRootView {
+        view.addSubview(rootView)
         view.setNeedsLayout()
       }
     } else {
